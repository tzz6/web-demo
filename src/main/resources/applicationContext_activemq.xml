<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">
	
	<!-- 扫描service自动注入为bean -->
	<context:component-scan base-package="com.tzz.jms.activemq" />
	
	<!-- ActiveMQ -->
	<!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供-->
    <bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="tcp://localhost:61616"/>
    </bean>
    <bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory">
        <property name="connectionFactory" ref="targetConnectionFactory"/>
        <property name="maxConnections" value="10"/>
    </bean>
    <bean id="connectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">
        <property name="targetConnectionFactory" ref="pooledConnectionFactory"/>
    </bean>
    
    <!-- 消息转换器   -->  
	<bean id="jsonMessageConverter" class="com.tzz.jms.activemq.converter.JsonMessageConverter"/>

	<!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 -->
	<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
		<property name="connectionFactory" ref="connectionFactory" />
		<!-- 消息转换器 -->  
    	<property name="messageConverter" ref="jsonMessageConverter"/>  
	</bean>
	
	<!-- **********************************************模式1.Queue点对点模式**********************************************   -->
	<!-- 消息队列的目的地   -->
	<bean id="destination_1" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>queue_1</value>
		</constructor-arg>
	</bean>
	
	<!-- ***********************监听器1.MessageListener***********************   -->
    <bean id="consumerMessageListener_1" class="com.tzz.jms.activemq.listener.ConsumerMessageListener">
    	<property name="messageConverter" ref="jsonMessageConverter"/>  
    </bean>
    
    <bean id="messageListener_1" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="connectionFactory" />
        <property name="destination" ref="destination_1" />
        <property name="messageListener" ref="consumerMessageListener_1" />
    </bean>
    
    
    
    
    <!-- **********************************************模式2.Topic（发布/订阅）模式**********************************************   -->
    <!-- ActiveMQ -->
	<!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供-->
    <bean id="topic_targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="failover:(tcp://localhost:61616)"/>
        <property name="useAsyncSend" value="true" />
        <property name="clientID" value="providerClienctConnect" />
    </bean>
    <bean id="topic_pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory">
        <property name="connectionFactory" ref="topic_targetConnectionFactory"/>
        <property name="maxConnections" value="10"/>
    </bean>
    <bean id="topic_connectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">
        <property name="targetConnectionFactory" ref="topic_pooledConnectionFactory"/>
    </bean>
    
    <!-- 消息转换器   -->  
	<bean id="topic_jsonMessageConverter" class="com.tzz.jms.activemq.converter.JsonMessageConverter"/>
    
	<!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 -->
	<bean id="jmsTemplateTopic" class="org.springframework.jms.core.JmsTemplate">
		<!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
		<property name="connectionFactory" ref="topic_connectionFactory" />
		<!-- 消息转换器 -->  
    	<property name="messageConverter" ref="topic_jsonMessageConverter"/>  
    	<!-- 开启订阅模式 -->
        <property name="pubSubDomain" value="true"/>
        <property name="receiveTimeout" value="10000" />
        <!-- deliveryMode, priority, timeToLive 的开关要生效，必须配置为true，默认false-->
        <property name="explicitQosEnabled" value="true"/>
        <!-- 发送模式
             DeliveryMode.NON_PERSISTENT=1:非持久 ;
             DeliveryMode.PERSISTENT=2:持久
        -->
        <property name="deliveryMode" value="1"/>
	</bean>
    <!-- 消息队列的目的地   -->
	<bean id="topic_destination_1" class="org.apache.activemq.command.ActiveMQTopic">
	<constructor-arg value="topic" />
	</bean>
	
	<!-- 配置消息消费监听者 -->
    <bean id="topic_consumerMessageListener" class="com.tzz.jms.activemq.listener.ConsumerMessageListener" />

    <!-- 消息订阅客户端1 -->
    <bean id="consumerListenerClient1" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="connectionFactory" />
        <!-- 开启订阅模式 -->
        <property name="pubSubDomain" value="true"/>
        <property name="destination" ref="topic_destination_1" />
        <property name="subscriptionDurable" value="true"/>
        <!---这里是设置接收客户端的ID，在持久化时，但这个客户端不在线时，消息就存在数据库里，直到被这个ID的客户端消费掉-->
        <property name="clientId" value="consumerClient1"/>
        <property name="messageListener" ref="topic_consumerMessageListener" />
        <!-- 消息应答方式
             Session.AUTO_ACKNOWLEDGE  消息自动签收
             Session.CLIENT_ACKNOWLEDGE  客户端调用acknowledge方法手动签收
             Session.DUPS_OK_ACKNOWLEDGE 不必必须签收，消息可能会重复发送
        -->
        <property name="sessionAcknowledgeMode" value="1"/>
    </bean>

    <!-- 消息订阅客户端2 -->
    <bean id="consumerListenerClient2" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="connectionFactory" />
        <!-- 开启订阅模式 -->
        <property name="pubSubDomain" value="true"/>
        <property name="destination" ref="topic_destination_1" />
        <property name="subscriptionDurable" value="true"/>
        <!---这里是设置接收客户端的ID，在持久化时，但这个客户端不在线时，消息就存在数据库里，直到被这个ID的客户端消费掉-->
        <property name="clientId" value="consumerClient2"/>
        <property name="messageListener" ref="topic_consumerMessageListener" />
        <!-- 消息应答方式
             Session.AUTO_ACKNOWLEDGE  消息自动签收
             Session.CLIENT_ACKNOWLEDGE  客户端调用acknowledge方法手动签收
             Session.DUPS_OK_ACKNOWLEDGE 不必必须签收，消息可能会重复发送
        -->
        <property name="sessionAcknowledgeMode" value="1"/>
    </bean>
</beans>
