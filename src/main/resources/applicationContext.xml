<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.1.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.1.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.1.xsd">
	
	<!-- 加载配置文件 -->
	<context:property-placeholder location="classpath:jdbc.properties" />
	<!-- 扫描service自动注入为bean -->
	<context:component-scan base-package="com.tzz.web,com.tzz.hessian.service,com.tzz.aop,com.tzz.job.springtask,com.tzz.report.jasperreports" />
	
	<!-- 配置数据源 c3p0 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 请求超时时间 -->
		<property name="checkoutTimeout" value="30000" />
		<!-- 每60秒检查所有连接池中的空闲连接。默认值: 0，不检查 -->
		<property name="idleConnectionTestPeriod" value="30" />
		<!-- 连接数据库连接池最大空闲时间 -->
		<property name="maxIdleTime" value="30" />
		<!-- 连接池初始化连接数 -->
		<property name="initialPoolSize" value="${c3p0.pool.size.ini}" />
		<property name="minPoolSize" value="${c3p0.pool.size.min}" />
		<property name="maxPoolSize" value="${c3p0.pool.size.max}" />
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。默认值: 3 -->
		<property name="acquireIncrement" value="${c3p0.pool.size.increment}" />
	</bean>

	<!-- 配置hibernate的SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- 注入数据源 相关信息看源码 -->
		<property name="dataSource" ref="dataSource" />
		<!-- hibernate配置信息 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>

				<!-- 开启二级缓存 ehcache -->
				<!-- 默认情况下二级缓存只会对load get 之类的方法缓存 -->
				<!-- 想支持list iterator 之类的方法也使用缓存，必须跟查询缓存一起使用，重写查询方法加上 .setCacheable(true) -->
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
				<prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
				<prop key="hibernate.cache.provider_configuration_file_resource_path">${hibernate.cache.provider_configuration_file_resource_path}
				</prop>
			</props>
		</property>
		<!-- 扫描hibernate注解配置的entity -->
		<property name="packagesToScan" value="com.tzz.web.domain" />
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
<!-- 声明使用注解式事务 <tx:annotation-driven transaction-manager="transactionManager"/> -->
	<!-- 配置事务增强处理Bean，指定事务管理器 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<!-- 配置详细事务处理语义 -->
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" isolation="DEFAULT" />
			<tx:method name="update*" propagation="REQUIRED" isolation="DEFAULT" />
			<tx:method name="delete*" propagation="REQUIRED" isolation="DEFAULT" />
			<tx:method name="batch*" propagation="REQUIRED" isolation="DEFAULT" />
			<tx:method name="new*" propagation="REQUIRED" isolation="DEFAULT" />

			<tx:method name="get*" propagation="SUPPORTS" isolation="DEFAULT" read-only="true" />
			<tx:method name="find*" propagation="SUPPORTS" isolation="DEFAULT" read-only="true" />
			<tx:method name="select*" propagation="SUPPORTS" isolation="DEFAULT" read-only="true" />
			<tx:method name="load*" propagation="SUPPORTS" isolation="DEFAULT" read-only="true" />

			<!-- 其他采用默认事务方式 -->
			<tx:method name="*" propagation="REQUIRED" isolation="DEFAULT" />
		</tx:attributes>
	</tx:advice>

	<!-- Spring aop事务管理 -->
	<aop:config>
		<!-- 配置切入点 -->
		<aop:pointcut id="transactionPointcut" expression="execution(* com.tzz.web.service..*Impl.*(..))" />
		<!-- 指定在txAdvice切入点应用txAdvice事务增强处理 -->
		<aop:advisor pointcut-ref="transactionPointcut"
			advice-ref="transactionAdvice" />
	</aop:config>
	
	<!-- AOP -->
	<import resource="classpath:applicationContext-aop.xml"/>
	
	<!-- 定时任务 Quartz-->
	<import resource="classpath:spring-job.xml"/>
	<!-- 定时任务 Spring Task -->
	<!-- <import resource="classpath:spring-task.xml"/> -->
	
	<!-- freemarker-->
	<import resource="classpath:applicationContext-freemarker.xml"/>

	<!-- 数据初始化 -->
	<bean id="scheduleJobDataInit" class="com.tzz.web.context.ScheduleJobDataInit" >
		<property name="scheduleJobService" ref="scheduleJobService"></property>
		<property name="quartzManager" ref="quartzManager"></property>
	</bean>
	<bean id="roleDataInitBeanPost" class="com.tzz.web.context.RoleDataInitBeanPost" >
		<property name="departmentService" ref="departmentService"></property>
	</bean>
	
	<!-- axis2 (CXF中的依赖包Xmlschema-core-2.0.3.jar与Axis2k中的依赖包XmlSchema有冲突)
	<bean id="axisHelloWorldService" class="com.tzz.ws.axis.service.impl.AxisHelloWorldImpl" />
	<bean id="applicationContext" class="org.apache.axis2.extensions.spring.receivers.ApplicationContextHolder" />
	-->
</beans>